//
//  GSCall.h
//  Gossip
//
//  Created by Chakrit Wichian on 7/9/12.
//

@import Foundation;

#import "PJSIP.h"

@class GSAccount, GSRingback, GSCall, GSIncomingCall, GSOutgoingCall;

/// Call session states.
typedef NS_ENUM(NSUInteger, GSCallStatus) {
    GSCallStatusReady, ///< Call is ready to be made/pickup.
    GSCallStatusCalling, ///< Call is ringing.
    GSCallStatusConnecting, ///< User or other party has pick up the call.
    GSCallStatusConnected, ///< Call has connected and sound is now coming through.
    GSCallStatusDisconnected, ///< Call has been disconnected (user hangup/other party hangup.)
};

NS_ASSUME_NONNULL_BEGIN

#if PJMEDIA_HAS_VIDEO

@import AVFoundation;
@import UIKit;

/// Delegate to receive call activity.
@protocol GSCallDelegate <NSObject>

/// Called on an arbitrary thread when an a PJSIP video view is ready to be displayed.
- (void)call:(GSCall *)account providesView:(UIView *)view isNative:(BOOL)isNative;

@end

#endif 

/// Represents a single calling session (either incoming or outgoing.)
@interface GSCall : NSObject

#if PJMEDIA_HAS_VIDEO

@property (nonatomic, weak) id <GSCallDelegate> delegate; ///< Call activity delegate.

#endif

@property (nonatomic, weak, readonly) GSAccount *account; ///< An account this call is being made from.
@property (nullable, nonatomic, readonly) GSRingback *ringback; ///< Returns the current GSRingback instance used to play the call's ringback.

@property (nonatomic, readonly) pjsua_call_id callId; ///< Call id. Autogenerated from PJSIP.
@property (nonatomic, readonly) GSCallStatus status; ///<  Call status. Supports KVO notification.
@property (nonatomic, readonly) pjsip_status_code lastStatusCode; ///<  Last status code heard.
@property (nullable, nonatomic, readonly) NSString *lastStatusText; ///<  Last status text heard.

@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled; ///< This is only set when you get an incoming cancellation reason right now.
@property (nonatomic, readonly) pjsip_status_code cancellationReasonCode; ///<  Last status code heard from the Reason: header of a CANCEL message.
@property (nullable, nonatomic, readonly) NSString *cancellationReasonText; ///<  Last status text heard from the Reason: header of a CANCEL message.

@property (nonatomic, readonly) float volume; ///< Call volume. Set to 0 to mute.
@property (nonatomic, readonly) float micVolume; ///< Call microphone volume. i.e. the volume to transmit sound from the mic. Set to 0 to mute.

@property (nullable, nonatomic, copy, readonly) NSString *remoteInfo;

/// Will return NSNotFound on errors. Dynamically queries call info connect_duration.sec
@property (nonatomic, readonly) long durationConnected;

#if PJMEDIA_HAS_VIDEO

/// Checks the call settings
@property (nonatomic, readonly, getter=isVideoEnabled) BOOL videoEnabled;
@property (nonatomic, readonly, getter=isReceivingVideo) BOOL receivingVideo;
@property (nonatomic, readonly, getter=isTransmittingVideo) BOOL transmittingVideo;

/// Should only be called if tranmsittingVideo is YES. May return AVCaptureDevicePositionUnspecified for any errors
@property (nonatomic, readonly) AVCaptureDevicePosition captureDevicePosition;

- (BOOL)setVideoTransmissionEnabled:(BOOL)enabled;
- (BOOL)setCaptureDevicePosition:(AVCaptureDevicePosition)position;
- (void)enumerateVideoViews:(nonnull void (^)(UIView *view, BOOL isNative, BOOL *stop))block;

#endif

+ (BOOL)verifySIPURIString:(NSString *)URIString;

/// Creates a new outgoing call to the specified remoteURI.
/** Use begin() to begin calling. */
+ (GSOutgoingCall *)outgoingCallToURI:(NSString *)remoteURI
                          fromAccount:(GSAccount *)account
                         videoEnabled:(BOOL)videoEnabled
                        customHeaders:(nullable NSDictionary <NSString *, NSString *> *)customHeaders;

/// Creates a new incoming call from the specified PJSIP call id. And associate it with the speicifed account.
/** Do not call this method directly, implement GSAccountDelegate and listen to the
 *  GSAccountDelegate::account:didReceiveIncomingCall: message instead. */
+ (GSIncomingCall *)incomingCallWithId:(pjsua_call_id)callId
                                invite:(pjsip_rx_data *)invite
                             toAccount:(GSAccount *)account;

/// Initialize a new call with the specified account.
/** Do not initialize a GSCall instance directly, instead use one of the provided static methods.
 *  This method is only inteded to be used by child classes. */
- (instancetype)initWithAccount:(GSAccount *)account;

- (BOOL)setVolume:(float)volume; ///< Sets the call volume. Returns YES if successful.
- (BOOL)setMicVolume:(float)volume; ///< Sets the microphone volume. Returns YES if successful.

- (BOOL)begin; ///< Begins calling for outgoing call or answer incoming call.
- (BOOL)hasEnded; ///< Whether the call has ended.
- (BOOL)end; ///< Stop calling and/or hangup call.
- (BOOL)answerWithCode:(unsigned)code; ///< Please use begin and end for traditional answers. This method is to send a response to an incoming INVITE request. Depending on the status code specified as parameter, this function may send provisional response, establish the call, or terminate the call.

- (BOOL)sendDTMFDigits:(NSString *)digits; ///< Sends DTMF digits over the call.

/// Custom headers in the INVITE
@property (nonatomic, nullable, readonly) NSDictionary <NSString *, NSString *> *inviteHeaders;

//- (nullable NSString *)stringForHeaderKey:(NSString *)headerKey;

@end

NS_ASSUME_NONNULL_END
